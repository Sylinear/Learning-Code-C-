#define _CRT_SECURE_NO_WARNINGS 1


#include<iostream>
using namespace::std;


//数组
    //一个存放了相同类型数据的集合
        //特点1：每个数据元素都是相同的数据类型
        //特点2：数组是由【连续的内存】位置组成的
int main()
{
//一维数组
    //定义：三种定义方式
    //int arr1[10];                       //写数组长度   但不初始化元素
    //int arr2[2] = { 5,10 };             //写数组长度   且初始化元素 
    //char arr3[] = { 'a','b','c' };      //不写数组长度 但初始化元素
    //                        //初始数组长度是必须的 要不就自己写 要不就初始化里告诉数组有几个元素
    //    //第一个数据：arr[0]  第二个数据：arr[1] .....第n个数据：arr[n-1]
    //    //   注意 因为下标从0开始 所以arr[3]中的元素只有arr[0] arr[1] arr[2]三个 而不存在arr[3]
    //    // []内的数字称为下标 我们可以通过下标访问数组中的元素

    //int arr[5];
    ////利用下标可以赋值
    //arr[0] = 10;
    //arr[1] = 20;

    ////下标可以访问数据元素
    //cout << arr[1] << endl;

    ////也可以用循环进行赋值或输出
    //for (int i = 0; i < 5; i++)
    //{
    //    cout << arr[i] << endl;
    //}

    ////数组名
    //    //1.数组名可以统计整个数组在内存中的长度
    //cout << "整个数组所占空间为：" << sizeof(arr) << endl;
    //cout << "每个元素所占空间为" << sizeof(arr[0]) << endl;//此处也可以用arr[1]等
    //cout << "数组的元素个数为：" << sizeof(arr) / sizeof(arr[0]) << endl;
    //    //2.可以获取数组在内存中的首地址
    //cout << arr << endl;     //输出地址

    //cout << (int)arr << endl;//以十进制方式输出地址
    //cout << &arr[0] << endl; //输出第一个元素的地址
    //cout << &arr[1] << endl; //输出第二个元素的地址
    //        //可以发现 数组名对应的地址 就是第一个元素的地址

    //cout << arr << endl;     
    //cout << &arr << endl;    //虽然不是该部分的内容 但是学过C语言的我们应该知道 &arr获得的是整个数组的地址
    //cout << arr+1 << endl;     
    //cout << &arr+1 << endl;    
    //        //+1时就发现了 arr是首元素地址 类型为int* 因此仅+4 而&arr是完整数组地址 类型为int*()[5] 因此会+20

    ////练习1：五只小猪称体重
    //       //在一个数组中记录了五只小猪的体重，如：int arr[5] = { 300,350,200,400,250 };找出并打印最重的小猪体重。
    //int arr4[5] = {300,350,200,400,250};
    //int max = arr4[0];
    //    //冒泡判断 如果后者比max大 则更新最大值
    //for (int i = 1; i < 5; i++)
    //{
    //if (arr4[i] > max)
    //{
    //    max = arr4[i];
    //}
    //}
    //cout << "最重的小猪体重为："<<max << endl;

    ////练习2：数组元素逆置
    //        //请声明一个5个元素的数组，并且将元素逆置.(如原数组元素为：1, 3, 2, 5, 4; 逆置后输出结果为:4, 5, 2, 3, 1);
    //
    ////假定起始下标与末尾下标
    //int start = 0;
    //int end = sizeof(arr4)/sizeof(arr4[0]) - 1;//自动获得数组长度 不同数组一样可以用
    //
    //int temp = 0;
    //while (start < end)
    //{
    //    temp = arr4[start];
    //    arr4[start] = arr4[end];
    //    arr4[end] = temp;
    //    start++;
    //    end--;
    //}
    //for (int i = 0; i < 5; i++)
    //{
    //    cout << arr4[i]<<"\t";
    //}
    //cout << endl;
    ////冒泡排序
    //  //最常用的排序算法，对数组内元素进行排序
    //    //    1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。
    //    //    2. 对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。
    //    //    3. 重复以上的步骤，每次比较次数 - 1，直到不需要比较
    //int arr5[9] = { 4,2,8,0,5,7,1,3,9 };
    //int sz = sizeof(arr5) / sizeof(arr5[0]);
    //for (int i = 0; i < sz - 1 ; i++)               //最后一个元素不需要排 因此是sz-1
    //{
    //    for (int j = 0; j < sz - i - 1; j++)
    //    {
    //        if (arr5[j] > arr5[j + 1])
    //        {
    //            int tmp = arr5[j];
    //            arr5[j] = arr5[j+1];
    //            arr5[j + 1] = tmp;
    //        }
    //    }
    //}
    //for (int i = 0; i < sz; i++)
    //{
    //    cout <<arr5[i] << "\t";
    //}
    //cout << endl;


    

//二维数组
    //二维数组定义的四种方式：
        //    1. 数据类型  数组名[行数][列数]; 
        //    2. 数据类型  数组名[行数][列数] = { {数据1，数据2 } ，{数据3，数据4 } }; 
        //    3. 数据类型  数组名[行数][列数] = { 数据1，数据2，数据3，数据4 }; 
        //    4. 数据类型  数组名[][列数] = { 数据1，数据2，数据3，数据4 }; 
                //无论哪种定义方式 列数都不可以忽略
    int arr1[2][3];// 2行 3列
    arr1[0][0] = 1;
	arr1[0][1] = 2;
	arr1[0][2] = 3;
	arr1[1][0] = 4;
	arr1[1][1] = 5;
	arr1[1][2] = 6;
    for (int i = 0; i < 2; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            cout << arr1[i][j] << " ";
        }
        cout << endl;
    }
    int arr2[2][3]=
    {
        {1,2,3},
        {4,5,6}
    };
    int arr3[2][3] = { 1,2,3,4,5,6 };//这种写法会自动分行
    int arr4[2][3] = { 1,2,3,4,5,6 };//若有初始化数据 则可忽略行数 但不可忽略列数


    //二维数组的数组名
    int arr[2][3] =
    {
        {1 ,2 ,3},
        {4 ,5 ,6}
    };
        //1.查看二维数组所占内存空间
    cout << "二维数组大小" << sizeof(arr) << endl;
    cout << "二维数组一行大小：" << sizeof(arr[0]) << endl; 
    cout << "二维数组每个元素大小" << sizeof(arr[0][0]) << endl;

    cout << "二维数组行数：" << sizeof(arr) / sizeof(arr[0]) << endl;
    cout << "二维数组列数：" << sizeof(arr[0]) / sizeof(arr[0][0]) << endl;

        //2.获取二维数组首地址
    cout << arr << endl;                //表示首元素地址【第一行地址】
    cout << &arr << endl;               //表示完整数组地址
    cout << arr[0] << endl;             //数组名表示首元素地址【第一行第一列元素地址】
    cout << &arr[0] << endl;            //表示完整第一行地址
    cout << &arr[0][0] << endl;          //表示第一行第一列地址
    //虽然显示地址都一样 但我们其实知道有所区别
    cout << arr +1 << endl;                     //+1行    
    cout << &arr +1<< endl;                     //+完整数组（3行2列）
    cout << arr[0] +1<< endl;                   //+1个元素
    cout << &arr[0] +1<< endl;                  //+1行
    cout << &arr[0][0] +1<< endl;                //+1个元素

    //牢记鹏哥的笔记： 数组名为元素首地址 二维数组的元素是一维数组   仅在sizeof 和 &时 数组名为完整数组！
    


    //二维数组应用实例:请输入三位同学的总成绩
    int scores[3][3]
    {
        {100,100,100},
        {90,50,100},
        {60,70,80}
    };
    string names[3] = { "张三","李四","王五" };//字符串数组也是一种二维数组 每个元素是一个char[]数组
    for (int i = 0; i < 3; i++)
    {
        int sum = 0;
        for (int j = 0; j < 3; j++)
        {
            sum += scores[i][j];
        }
        cout << names[i] << "同学的总成绩为：" << sum << endl;
    }



    system("pause");
    return 0;
}
#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
using namespace std;

/*
*  生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全
*  C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。
*/

//构造函数 和 析构函数
    //对象的初始化和清理十分重要:
        //初始化:一个对象或者变量没有初始状态，对其使用后果是未知
        //清理:同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题

    //C++使用构造函数来进行初始化 使用析构函数来清理变量 这两个函数会被编译器自动调用(哪怕你没写) 完成对象初始化和清理
        //但我们不提供构造和析构时 编译器提供的构造函数和析构函数是空实现

//构造函数：主要作用在于[创建对象时]为对象的[成员属性]赋值，构造函数由编译器自动调用，无须手动调用。
//析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。



//对象的初始化和清理
    //1. 构造函数 进行初始化操作
    //2. 析构函数 进行清理操作

//构造函数 的语法:
    //  类名() {}
      // 注:1.构造函数 不需要返回值 连void也不用写
          // 2.函数名不用写 函数名与类名相同
           // 3.构造函数会在调用对象的时候自动构造 无需手动调用 而且只会调用一次
             // 4.构造函数可以有参数 因此可以发生重载  (可以有初始值)

//析构函数 的语法:
    //  ~类名() {}
      // 注:1.同样不需返回值
          // 2. 名称在类名前加上~
           // 3. 不可以有参数 因此不可重载      (删除数据你重载什么重载)
            // 4. 程序会在对象销毁前自动调用析构 无需手动调用 且只有一次

class Person
{
public:
    //构造函数
    Person() 
    {
        cout << "构造函数的调用" << endl;
    };            //没有返回值 也不用写void  函数名就是类名  实例化对象时会自动调用 且只调用一次

    //析构函数
    ~Person()
    {
        cout << "析构函数的调用" << endl;
    }
};

void test01()
{
    Person P;
}
int main()
{
    test01();//可以发现 只是创建对象时 构造函数就自动调用了 且只调用一次 
                //若我们不自己写 编译器也会自动创建构造函数 但是空函数  
             
             //析构函数也调用了 局部变量位于栈 因为程序结束时 栈上的数据就会被释放 因此调用了析构函数

    Person P1;//构造函数调用了 
                //但析构函数没有立刻调用 在执行了"pause"之后才调用 因为对象P1作用域为主函数 在main函数结束后才释放数据

    system("pause");
    return 0;
}